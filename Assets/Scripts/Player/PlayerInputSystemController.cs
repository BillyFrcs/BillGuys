//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input System/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Player.InputSystem
{
    public partial class @PlayerInputSystemController : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInputSystemController()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""PlayerCharacterController"",
            ""id"": ""f76a7221-a615-4a55-9c16-6f92abeff287"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""73e92a25-b254-433c-912a-866ac079fe4f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""25f8b6f9-4cc6-4cf0-9c9a-be9f996e2d85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap(duration=0.04)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dance"",
                    ""type"": ""Button"",
                    ""id"": ""1092ae1e-cb53-418e-9551-72ac35d0e910"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Punch"",
                    ""type"": ""Button"",
                    ""id"": ""483e1278-bb98-4a57-90ea-54cc3be5a61a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Kick"",
                    ""type"": ""Button"",
                    ""id"": ""f7978945-6de9-44ff-8938-e293c6fb6d4d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""25e57f4c-23df-472e-9211-465d3d7aa7a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d5af66fb-ed99-45ba-9343-f5a2a40b841e"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba778ad9-8f2f-4585-86c4-3f4ba792e7ac"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dance"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e2f63de-f91b-47f3-92f2-8f9e2f237342"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard WASD"",
                    ""id"": ""835f79c6-2ecb-4964-8594-0e1b44da770d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b9c5e159-39e3-425b-b2b8-364fe5e48cd1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c498c2f6-8e78-43d6-be14-1e3badbd9c43"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ad6f7a79-5255-4d39-84a7-84ba649e9000"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6c8a4b28-c4fc-4946-ad01-6d71492e2dc2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard Arrow"",
                    ""id"": ""d01d0643-98d9-4f53-9528-b1136346e78b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2306a23e-6f6e-4c43-ae50-870ce82865df"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d3d09de0-e2b8-4e2f-905e-4b40fbeb3542"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1e5f7290-2a72-4f86-b6a8-7410506b71dc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2d3b6563-c72b-4ebe-be2b-c1f6baac7523"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1696dfee-6ce2-439f-b132-bad24d859956"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""083a4b6f-eb8e-42bd-bddc-ed2983a56125"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerCharacterController
            m_PlayerCharacterController = asset.FindActionMap("PlayerCharacterController", throwIfNotFound: true);
            m_PlayerCharacterController_Movement = m_PlayerCharacterController.FindAction("Movement", throwIfNotFound: true);
            m_PlayerCharacterController_Jump = m_PlayerCharacterController.FindAction("Jump", throwIfNotFound: true);
            m_PlayerCharacterController_Dance = m_PlayerCharacterController.FindAction("Dance", throwIfNotFound: true);
            m_PlayerCharacterController_Punch = m_PlayerCharacterController.FindAction("Punch", throwIfNotFound: true);
            m_PlayerCharacterController_Kick = m_PlayerCharacterController.FindAction("Kick", throwIfNotFound: true);
            m_PlayerCharacterController_Look = m_PlayerCharacterController.FindAction("Look", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerCharacterController
        private readonly InputActionMap m_PlayerCharacterController;
        private IPlayerCharacterControllerActions m_PlayerCharacterControllerActionsCallbackInterface;
        private readonly InputAction m_PlayerCharacterController_Movement;
        private readonly InputAction m_PlayerCharacterController_Jump;
        private readonly InputAction m_PlayerCharacterController_Dance;
        private readonly InputAction m_PlayerCharacterController_Punch;
        private readonly InputAction m_PlayerCharacterController_Kick;
        private readonly InputAction m_PlayerCharacterController_Look;
        public struct PlayerCharacterControllerActions
        {
            private @PlayerInputSystemController m_Wrapper;
            public PlayerCharacterControllerActions(@PlayerInputSystemController wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_PlayerCharacterController_Movement;
            public InputAction @Jump => m_Wrapper.m_PlayerCharacterController_Jump;
            public InputAction @Dance => m_Wrapper.m_PlayerCharacterController_Dance;
            public InputAction @Punch => m_Wrapper.m_PlayerCharacterController_Punch;
            public InputAction @Kick => m_Wrapper.m_PlayerCharacterController_Kick;
            public InputAction @Look => m_Wrapper.m_PlayerCharacterController_Look;
            public InputActionMap Get() { return m_Wrapper.m_PlayerCharacterController; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerCharacterControllerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerCharacterControllerActions instance)
            {
                if (m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnMovement;
                    @Jump.started -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnJump;
                    @Dance.started -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnDance;
                    @Dance.performed -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnDance;
                    @Dance.canceled -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnDance;
                    @Punch.started -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnPunch;
                    @Punch.performed -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnPunch;
                    @Punch.canceled -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnPunch;
                    @Kick.started -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnKick;
                    @Kick.performed -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnKick;
                    @Kick.canceled -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnKick;
                    @Look.started -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnLook;
                    @Look.performed -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnLook;
                    @Look.canceled -= m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface.OnLook;
                }
                m_Wrapper.m_PlayerCharacterControllerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @Dance.started += instance.OnDance;
                    @Dance.performed += instance.OnDance;
                    @Dance.canceled += instance.OnDance;
                    @Punch.started += instance.OnPunch;
                    @Punch.performed += instance.OnPunch;
                    @Punch.canceled += instance.OnPunch;
                    @Kick.started += instance.OnKick;
                    @Kick.performed += instance.OnKick;
                    @Kick.canceled += instance.OnKick;
                    @Look.started += instance.OnLook;
                    @Look.performed += instance.OnLook;
                    @Look.canceled += instance.OnLook;
                }
            }
        }
        public PlayerCharacterControllerActions @PlayerCharacterController => new PlayerCharacterControllerActions(this);
        public interface IPlayerCharacterControllerActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnDance(InputAction.CallbackContext context);
            void OnPunch(InputAction.CallbackContext context);
            void OnKick(InputAction.CallbackContext context);
            void OnLook(InputAction.CallbackContext context);
        }
    }
}
